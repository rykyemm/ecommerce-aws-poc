name: CI/CD Pipeline for E-commerce POC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Pour permettre le dÃ©clenchement manuel

jobs:
  frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps
        npm install --save-dev cypress@13.0.0 --legacy-peer-deps
        
        # Create cypress.config.js
        echo 'module.exports = {
          e2e: {
            baseUrl: "http://localhost:3000",
            video: true,
            screenshotOnRunFailure: true
          }
        }' > cypress.config.js
        
        # Create basic Cypress test structure
        mkdir -p cypress/e2e
        echo 'describe("Homepage", () => {
          it("should load the homepage", () => {
            cy.visit("/");
            cy.get("h1").should("exist");
          });
        });' > cypress/e2e/home.cy.js
        
    - name: Install and configure ESLint
      run: |
        cd frontend
        npm install --save-dev --legacy-peer-deps \
          eslint@8.x \
          eslint-plugin-react@latest \
          eslint-plugin-react-hooks@latest \
          eslint-plugin-jsx-a11y@latest \
          @typescript-eslint/parser@5.x \
          @typescript-eslint/eslint-plugin@5.x \
          @types/react@18.x \
          typescript@4.9.5
        
    - name: Run ESLint
      run: |
        cd frontend
        npx eslint src/ --ext .js,.jsx,.ts,.tsx --max-warnings=20 --ignore-pattern "*.config.js" --ignore-pattern "e2e/*"
        
    - name: Configure Jest and Babel
      run: |
        cd frontend
        npm install --save-dev --legacy-peer-deps \
          @babel/core@7.22.20 \
          @babel/preset-env@7.22.20 \
          @babel/preset-react@7.22.15 \
          babel-jest@29.7.0 \
          jest@29.7.0 \
          @testing-library/react@14.0.0 \
          @testing-library/jest-dom@6.1.4 \
          @testing-library/user-event@14.5.1 \
          jest-environment-jsdom@29.7.0 \
          identity-obj-proxy@3.0.0
          
        # Create babel.config.js
        echo 'module.exports = {
          presets: [
            ["@babel/preset-env", {
              targets: {node: "current"},
              modules: "auto"
            }],
            ["@babel/preset-react", {runtime: "automatic"}]
          ]
        };' > babel.config.js
        
        # Create jest.config.js
        echo 'module.exports = {
          testEnvironment: "jsdom",
          moduleNameMapper: {
            "\\.(css|less|scss|sass)$": "identity-obj-proxy",
            "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/__mocks__/fileMock.js"
          },
          setupFilesAfterEnv: ["<rootDir>/src/setupTests.js"],
          transform: {
            "^.+\\.(js|jsx|ts|tsx)$": "babel-jest",
            "^.+\\.(js|jsx|ts|tsx)$": ["babel-jest", { configFile: "./babel.config.js" }]
          },
          transformIgnorePatterns: [
            "/node_modules/(?!axios)/"
          ],
          testEnvironmentOptions: {
            url: "http://localhost"
          }
        };' > jest.config.js
        
        # Create setupTests.js
        echo 'import "@testing-library/jest-dom";
        import { configure } from "@testing-library/react";
        
        // Suppress specific warnings
        const originalError = console.error;
        console.error = (...args) => {
          if (
            /Warning: ReactDOMTestUtils.act is deprecated/.test(args[0]) ||
            /React Router Future Flag Warning/.test(args[0])
          ) {
            return;
          }
          originalError.call(console, ...args);
        };
        
        // Configure testing-library
        configure({ testIdAttribute: "data-testid" });
        
        // Mock window.matchMedia
        Object.defineProperty(window, "matchMedia", {
          writable: true,
          value: jest.fn().mockImplementation(query => ({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn(),
          })),
        });' > src/setupTests.js
        
        # Create fileMock.js
        echo 'module.exports = "test-file-stub";' > __mocks__/fileMock.js
        
        # Create axios mock
        echo 'module.exports = {
          get: jest.fn((url) => {
            if (url === "/api/products") {
              return Promise.resolve({
                data: [
                  {
                    id: 1,
                    name: "iPhone 13",
                    price: 999.99,
                    description: "Latest iPhone model",
                    image_url: "iphone13.txt"
                  },
                  {
                    id: 2,
                    name: "Samsung Galaxy S21",
                    price: 899.99,
                    description: "Latest Samsung model",
                    image_url: "samsung.txt"
                  }
                ]
              });
            }
            return Promise.resolve({ data: [] });
          }),
          post: jest.fn(() => Promise.resolve({ data: {} })),
          put: jest.fn(() => Promise.resolve({ data: {} })),
          delete: jest.fn(() => Promise.resolve({ data: {} }))
        };' > __mocks__/axios.js
        
    - name: Run Jest Tests
      run: |
        cd frontend
        npm run test:coverage -- --no-cache
        
    - name: Upload Jest coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage
        
    - name: Build React app
      run: |
        cd frontend
        CI=false npm run build
        
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    needs: frontend
    
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ecommerce
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=root --password=root"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: pdo_mysql
        
    - name: Install MySQL Client
      run: sudo apt-get install -y mysql-client
        
    - name: Initialize Test Database
      run: |
        mysql -h 127.0.0.1 -u user -ppassword ecommerce < backend/api/setup_test_db.sql
        
    - name: Start PHP Server
      run: |
        cd backend
        php -S localhost:8080 server.php > php-server.log 2>&1 &
        echo "Waiting for PHP server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8080/api/products > /dev/null; then
            echo "PHP server is running!"
            exit 0
          fi
          sleep 1
        done
        echo "PHP server failed to start"
        cat php-server.log
        exit 1
        
    - name: Install Newman
      run: npm install -g newman
        
    - name: Run API Tests
      run: |
        cd backend/api
        mkdir -p results
        newman run newman.json -e environment.json --reporters cli,junit --reporter-junit-export results/junit-report.xml
        
    - name: Upload API Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: backend/api/results/

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ecommerce
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --host=localhost --user=root --password=root"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm install --legacy-peer-deps
        
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: pdo_mysql
        
    - name: Install MySQL Client
      run: sudo apt-get install -y mysql-client
        
    - name: Initialize Test Database
      run: |
        mysql -h 127.0.0.1 -u user -ppassword ecommerce < backend/api/setup_test_db.sql
        
    - name: Start PHP Server
      run: |
        cd backend
        php -S localhost:8080 server.php > php-server.log 2>&1 &
        echo "Waiting for PHP server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8080/api/products > /dev/null; then
            echo "PHP server is running!"
            exit 0
          fi
          sleep 1
        done
        echo "PHP server failed to start"
        cat php-server.log
        exit 1
        
    - name: Start Frontend Dev Server
      run: |
        cd frontend
        npm start > frontend-server.log 2>&1 &
        echo "Waiting for frontend server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Frontend server is running!"
            exit 0
          fi
          sleep 1
        done
        echo "Frontend server failed to start"
        cat frontend-server.log
        exit 1
        
    - name: Run Cypress Tests
      env:
        CI_BUILD_ID: ${{ github.run_id }}
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      run: |
        cd frontend
        npm run test:e2e:ci
        
    - name: Upload Cypress Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-results
        path: frontend/cypress/videos

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install JMeter
      run: |
        sudo apt-get update
        sudo apt-get install -y jmeter
        
    - name: Check JMeter Test File
      run: |
        if [ ! -f "performance_tests/load_test.jmx" ]; then
          echo "Error: load_test.jmx not found"
          exit 1
        fi
        
    - name: Run JMeter Tests
      run: |
        cd performance_tests
        jmeter -n -t load_test.jmx -l results.jtl --reportatendoflogtests -o report || {
          echo "JMeter test failed"
          cat results.jtl
          exit 1
        }
        
    - name: Upload JMeter Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jmeter-results
        path: performance_tests/results.jtl

  package:
    name: Create Deployment Package
    runs-on: ubuntu-latest
    needs: [frontend, backend, e2e, performance-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build
        
    - name: Create deployment package
      run: |
        zip -r deployment.zip frontend/build backend/
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: deployment.zip

  deploy-to-s3:
    name: Deploy to S3
    runs-on: ubuntu-latest
    needs: package
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: .
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3
        
    - name: Deploy to S3
      run: |
        aws s3 cp deployment.zip s3://${{ secrets.AWS_S3_BUCKET }}/deployment.zip 